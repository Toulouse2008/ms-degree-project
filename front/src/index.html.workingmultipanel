<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Stock Info App</title>
  <base href="/">

  <!-- the following javascript codes make the charts  -->
  <script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
  <script src="https://www.amcharts.com/lib/3/serial.js"></script>
  <script src="https://www.amcharts.com/lib/3/themes/light.js"></script>
  <script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
  <script>
    var data = [];
    var chartData = [];
    // replace generateChartData() function with data from mongodb
 function generateChartData(data) {
     data = JSON.parse(data);
     alert(data.length);
     // assembly the data in to one object per date
    for(var i = 0; i < data.length; i++){
     chartData[i] = ({
             date: new Date(data[i]['date']),
             open: data[i]['open'],
             close: data[i]['close'],
             high: data[i]['high'],
             low: data[i]['low'],
             volume: data[i]['volume'],
             value: data[i]['close']
         });
     }
 }

 function createStockChart() {
     var chart = new AmCharts.AmStockChart();


     // datasets
     var dataSet = new AmCharts.DataSet();
     dataSet.fieldMappings = [{
         fromField: "open",
         toField: "open"
     }, {
         fromField: "close",
         toField: "close"
     }, {
         fromField: "high",
         toField: "high"
     }, {
         fromField: "low",
         toField: "low"
     }, {
         fromField: "volume",
         toField: "volume"
     }, {
         fromField: "value",
         toField: "value"
     }];
     dataSet.color = "#7f8da9";    // setup dataset color
     dataSet.dataProvider = chartData;
     dataSet.title = "West Stock";
     dataSet.categoryField = "date";

     chart.dataSets = [dataSet];

     // Panels
     var stockPanel = new AmCharts.StockPanel();
     stockPanel.title = "Value";
     stockPanel.showCategoryAxis = false;
     stockPanel.percentHeight = 70;

     var valueAxis = new AmCharts.ValueAxis();
     valueAxis.dashLength = 5;
     stockPanel.addValueAxis(valueAxis);

     stockPanel.categoryAxis.dashLength = 5;

     // graph of first stock panel
     var graph = new AmCharts.StockGraph();
     graph.type = "candlestick";
     graph.openField = "open";
     graph.closeField = "close";
     graph.highField = "high";
     graph.lowField = "low";
     graph.valueField = "close";
     graph.lineColor = "#7f8da9";
     graph.fillColors = "#7f8da9";
     graph.negativeLineColor = "#db4c3c";
     graph.negativeFillColors = "#db4c3c";
     graph.proCandlesticks = true;
     graph.fillAlphas = 1;
     graph.useDataSetColors = false;
     graph.comparable = true;
     graph.compareField = "value";
     graph.showBalloon = false;
     stockPanel.addStockGraph(graph);

     var stockLegend = new AmCharts.StockLegend();
     stockLegend.valueTextRegular = undefined;
     stockLegend.periodValueTextComparing = "[[percents.value.close]]%";
     stockPanel.stockLegend = stockLegend;

     var chartCursor = new AmCharts.ChartCursor();
     chartCursor.valueLineEnabled = true;
     chartCursor.valueLineAxis = valueAxis;
     stockPanel.chartCursor = chartCursor;


     chart.panels = [stockPanel];


     // other settings
     var sbsettings = new AmCharts.ChartScrollbarSettings();
     sbsettings.graph = graph;
     sbsettings.graphType = "line";
     sbsettings.usePeriod = "WW";
     sbsettings.updateOnReleaseOnly = false;
     chart.chartScrollbarSettings = sbsettings;


     // Period selector
     var periodSelector = new AmCharts.PeriodSelector();
     periodSelector.position = "bottom";
     periodSelector.periods = [{
         period: "DD",
         count: 10,
         label: "10 days"
     }, {
         period: "MM",
         selected: true,
         count: 1,
         label: "1 month"
     }, {
         period: "YYYY",
         count: 1,
         label: "1 year"
     }, {
         period: "YTD",
         label: "YTD"
     }, {
         period: "MAX",
         label: "MAX"
     }];
     chart.periodSelector = periodSelector;

     chart.write('chartdiv');
 }

$.get("http://localhost:3000/data", function(data){
    $('.result').html(data);
})
.success(function(data){
    console.log('In success');
    AmCharts.ready(function(){
        generateChartData(data);
        createStockChart();
    });
})
.error(function(){console.log('errror');})
.complete(function(){
    console.log("DONE!");
});

 // AmCharts.ready(function () {
 //     generateChartData();
 //     createStockChart();
 // });
/*
 var myXmlHttpRequest = "";
 function getXHRObject(){
     var xmlHttpRequest = new XMLHttpRequest();
     return xmlHttpRequest;
 }
 function getData(){
     myXmlHttpRequest = getXHRObject();
     if(myXmlHttpRequest){
         var url = "http://localhost:3000/data";
         myXmlHttpRequest.open("get", url, true);
         myXmlHttpRequest.send(null);
         if(myXmlHttpRequest.onreadystatechange == 4) {
             data = JSON.parse(myXmlHttpRequest.responseText);
             alert(data.length);
         }
     }
 }
 getData();
 function handleChange(){
         // test the pathway if the pathway is functioning
         //window.alert("callback handleChange called " + myXmlHttpRequest.readyState);
         if(myXmlHttpRequest.readyState == 4){
             // take a look at the content before going deeper
             //window.alert("Return content is: " + myXmlHttpRequest.responseText);
             //var sObj = myXmlHttpRequest.responseText;
             data = JSON.parse(myXmlHttpRequest.responseText);
             //alert(chartData.length);
         }
     }
*/


    /* Ajax get request to get data from backend --> OK
    var myXmlHttpRequest = "";
    function getXHRObject(){
        var xmlHttpRequest = new XMLHttpRequest();
        return xmlHttpRequest;
    }
    function getData(){
        myXmlHttpRequest = getXHRObject();
        if(myXmlHttpRequest){
            var url = "http://localhost:3000/data";
            myXmlHttpRequest.open("get", url, true);
            myXmlHttpRequest.onreadystatechange = handleChange;
            myXmlHttpRequest.send(null);
        }
    }
    function handleChange(){
            // test the pathway if the pathway is functioning
            //window.alert("callback handleChange called " + myXmlHttpRequest.readyState);
            if(myXmlHttpRequest.readyState == 4){
                // take a look at the content before going deeper
                //window.alert("Return content is: " + myXmlHttpRequest.responseText);
                //var sObj = myXmlHttpRequest.responseText;
                data = JSON.parse(myXmlHttpRequest.responseText);
                //alert(chartData.length);
            }
        }
*/





  </script>

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
  <div class="result"></div>

</body>
</html>
